circuit clkSwitch2to1 :
  module clkSwitch2to1 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip clkin : Clock[2], flip clksel : UInt<1>, clko : Clock}

    node sel_clk0 = eq(io.clksel, UInt<1>("h1")) @[clk.scala 47:28]
    node sel_clk1 = eq(io.clksel, UInt<1>("h0")) @[clk.scala 48:28]
    wire clk_neg : UInt<1>[2] @[clk.scala 50:21]
    wire sel_clk0_rd : UInt<2> @[clk.scala 51:25]
    wire sel_clk0_neg_rd : UInt<2> @[clk.scala 52:29]
    wire sel_clk1_rd : UInt<2> @[clk.scala 53:25]
    wire sel_clk1_neg_rd : UInt<2> @[clk.scala 54:29]
    node _clk_neg_0_T = asUInt(io.clkin[0]) @[clk.scala 56:52]
    node _clk_neg_0_T_1 = bits(_clk_neg_0_T, 0, 0) @[clk.scala 56:52]
    node _clk_neg_0_T_2 = not(_clk_neg_0_T_1) @[clk.scala 56:39]
    clk_neg[0] <= _clk_neg_0_T_2 @[clk.scala 56:36]
    node _clk_neg_1_T = asUInt(io.clkin[1]) @[clk.scala 56:52]
    node _clk_neg_1_T_1 = bits(_clk_neg_1_T, 0, 0) @[clk.scala 56:52]
    node _clk_neg_1_T_2 = not(_clk_neg_1_T_1) @[clk.scala 56:39]
    clk_neg[1] <= _clk_neg_1_T_2 @[clk.scala 56:36]
    node _sel_clk0_r_T = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    reg sel_clk0_r : UInt, io.clkin[0] with :
      reset => (reset, _sel_clk0_r_T) @[clk.scala 59:29]
    node _sel_clk0_r_T_1 = bits(sel_clk0_r, 0, 0) @[clk.scala 60:34]
    node _sel_clk0_r_T_2 = bits(sel_clk1_neg_rd, 1, 1) @[clk.scala 60:72]
    node _sel_clk0_r_T_3 = eq(_sel_clk0_r_T_2, UInt<1>("h0")) @[clk.scala 60:56]
    node _sel_clk0_r_T_4 = and(sel_clk0, _sel_clk0_r_T_3) @[clk.scala 60:54]
    node _sel_clk0_r_T_5 = cat(_sel_clk0_r_T_1, _sel_clk0_r_T_4) @[Cat.scala 33:92]
    sel_clk0_r <= _sel_clk0_r_T_5 @[clk.scala 60:16]
    sel_clk0_rd <= sel_clk0_r @[clk.scala 62:17]
    node _T = asClock(clk_neg[0]) @[clk.scala 64:32]
    reg sel_clk0_neg_r : UInt<2>, _T with :
      reset => (reset, UInt<2>("h0")) @[clk.scala 65:33]
    node _sel_clk0_neg_r_T = bits(sel_clk0_neg_r, 0, 0) @[clk.scala 66:41]
    node _sel_clk0_neg_r_T_1 = bits(sel_clk0_rd, 1, 1) @[clk.scala 66:56]
    node _sel_clk0_neg_r_T_2 = cat(_sel_clk0_neg_r_T, _sel_clk0_neg_r_T_1) @[Cat.scala 33:92]
    sel_clk0_neg_r <= _sel_clk0_neg_r_T_2 @[clk.scala 66:20]
    sel_clk0_neg_rd <= sel_clk0_neg_r @[clk.scala 68:21]
    node _sel_clk1_r_T = mux(UInt<1>("h0"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    reg sel_clk1_r : UInt, io.clkin[1] with :
      reset => (reset, _sel_clk1_r_T) @[clk.scala 72:29]
    node _sel_clk1_r_T_1 = bits(sel_clk1_r, 0, 0) @[clk.scala 73:33]
    node _sel_clk1_r_T_2 = bits(sel_clk0_neg_rd, 1, 1) @[clk.scala 73:72]
    node _sel_clk1_r_T_3 = eq(_sel_clk1_r_T_2, UInt<1>("h0")) @[clk.scala 73:56]
    node _sel_clk1_r_T_4 = and(sel_clk1, _sel_clk1_r_T_3) @[clk.scala 73:54]
    node _sel_clk1_r_T_5 = cat(_sel_clk1_r_T_1, _sel_clk1_r_T_4) @[Cat.scala 33:92]
    sel_clk1_r <= _sel_clk1_r_T_5 @[clk.scala 73:16]
    sel_clk1_rd <= sel_clk1_r @[clk.scala 75:17]
    node _T_1 = asClock(clk_neg[1]) @[clk.scala 78:32]
    reg sel_clk1_neg_r : UInt<2>, _T_1 with :
      reset => (reset, UInt<2>("h0")) @[clk.scala 79:33]
    node _sel_clk1_neg_r_T = bits(sel_clk1_neg_r, 0, 0) @[clk.scala 80:41]
    node _sel_clk1_neg_r_T_1 = bits(sel_clk1_rd, 1, 1) @[clk.scala 80:56]
    node _sel_clk1_neg_r_T_2 = cat(_sel_clk1_neg_r_T, _sel_clk1_neg_r_T_1) @[Cat.scala 33:92]
    sel_clk1_neg_r <= _sel_clk1_neg_r_T_2 @[clk.scala 80:20]
    sel_clk1_neg_rd <= sel_clk1_neg_r @[clk.scala 82:21]
    wire clk_gate : UInt<1>[2] @[clk.scala 85:22]
    node _clk_gate_0_T = asUInt(io.clkin[0]) @[clk.scala 86:30]
    node _clk_gate_0_T_1 = bits(_clk_gate_0_T, 0, 0) @[clk.scala 86:30]
    node _clk_gate_0_T_2 = bits(sel_clk0_neg_rd, 1, 1) @[clk.scala 86:54]
    node _clk_gate_0_T_3 = and(_clk_gate_0_T_1, _clk_gate_0_T_2) @[clk.scala 86:37]
    clk_gate[0] <= _clk_gate_0_T_3 @[clk.scala 86:15]
    node _clk_gate_1_T = asUInt(io.clkin[1]) @[clk.scala 87:30]
    node _clk_gate_1_T_1 = bits(_clk_gate_1_T, 0, 0) @[clk.scala 87:30]
    node _clk_gate_1_T_2 = bits(sel_clk1_neg_rd, 1, 1) @[clk.scala 87:54]
    node _clk_gate_1_T_3 = and(_clk_gate_1_T_1, _clk_gate_1_T_2) @[clk.scala 87:37]
    clk_gate[1] <= _clk_gate_1_T_3 @[clk.scala 87:15]
    node _io_clko_T = cat(clk_gate[1], clk_gate[0]) @[clk.scala 89:23]
    node _io_clko_T_1 = orr(_io_clko_T) @[clk.scala 89:30]
    node _io_clko_T_2 = asClock(_io_clko_T_1) @[clk.scala 89:34]
    io.clko <= _io_clko_T_2 @[clk.scala 89:11]

