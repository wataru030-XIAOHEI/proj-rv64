//================================================================
// file         : isa_C
// description  : RISC-V Compressed instructions
// author       : Wataru
// version      :
// date         : 2023-07-28
//================================================================
package isa
import chisel3.util.BitPat

object isa_32IC {
  def c_nop  : BitPat = BitPat("b000 ? ????? ????? 01")
  def c_addi : BitPat = BitPat("b000 ? ????? ????? 01")

  def c_jal: BitPat = BitPat("b001 ? ????? ????? 01")

  def c_li   : BitPat = BitPat("b010 ? ????? ????? 01")
  def c_lui  : BitPat = BitPat("b011 ? ????? ????? 01")
  def c_srli : BitPat = BitPat("b100 ? 00??? ????? 01")
  def c_srai : BitPat = BitPat("b100 ? 01??? ????? 01")
  def c_andi : BitPat = BitPat("b100 ? 10??? ????? 01")
  def c_sub  : BitPat = BitPat("b100 0 11??? 00??? 01")
  def c_xor  : BitPat = BitPat("b100 0 11??? 01??? 01")
  def c_or   : BitPat = BitPat("b100 0 11??? 10??? 01")
  def c_and  : BitPat = BitPat("b100 0 11??? 11??? 01")
  def c_j    : BitPat = BitPat("b101 ? ????? ????? 01")
  def c_beqz : BitPat = BitPat("b110 ? ????? ????? 01")
  def c_bnez : BitPat = BitPat("b111 ? ????? ????? 01")
  def c_addi16sp : BitPat = BitPat("b011 ? 00010 ????? 01")

  // bit[1:0] == 2'b00
  def c_ilg  : BitPat = BitPat("b000 000 000 00 000 00")     // illegal instruction
  def c_lw   : BitPat = BitPat("b010 ??? ??? ?? ??? 00")
  def c_sw   : BitPat = BitPat("b110 ??? ??? ?? ??? 00")
  def c_addi4spn :BitPat = BitPat("b000 ?? ???? ? ? ??? 00")

  // bit[1:0] == 2'b10
  def c_slli : BitPat = BitPat("b000 ? ????? ????? 10")
  def c_slli64:BitPat = BitPat("b000 0 ????? 00000 10")
  def c_lwsp : BitPat = BitPat("b010 ? ????? ????? 10")
  def c_jr   : BitPat = BitPat("b100 0 ????? 00000 10")
  def c_mv   : BitPat = BitPat("b100 0 ????? ????? 10")
  def c_ebreak:BitPat = BitPat("b100 1 00000 00000 10")
  def c_jalr : BitPat = BitPat("b100 1 ????? 00000 10")
  def c_add  : BitPat = BitPat("b100 1 ????? ????? 10")
  def c_swsp : BitPat = BitPat("b110 ? ????? ????? 10")

}

object isa_FC {
  def c_flw  : BitPat = BitPat("b011 ??? ??? ?? ??? 00")
  def c_fsw  : BitPat = BitPat("b111 ??? ??? ?? ??? 00")
  def c_flwsp: BitPat = BitPat("b011 ? ????? ????? 10")
  def c_fswsp: BitPat = BitPat("b111 ? ????? ????? 10")
}

object isa_DC {
  def c_fld  : BitPat = BitPat("b001 ??? ??? ?? ??? 00")
  def c_fsd  : BitPat = BitPat("b101 ??? ??? ?? ??? 00")
  def c_fsdsp: BitPat = BitPat("b101 ? ????? ????? 10")
  def c_fldsp: BitPat = BitPat("b001 ? ????? ????? 10")
}


object isa_64IC {
  def c_nop  : BitPat = BitPat("b000 ? ????? ????? 01")
  def c_addi : BitPat = BitPat("b000 ? ????? ????? 01")
  def c_li   : BitPat = BitPat("b010 ? ????? ????? 01")
  def c_lui  : BitPat = BitPat("b011 ? ????? ????? 01")
  def c_srli : BitPat = BitPat("b100 ? 00??? ????? 01")
  def c_srai : BitPat = BitPat("b100 ? 01??? ????? 01")
  def c_andi : BitPat = BitPat("b100 ? 10??? ????? 01")
  def c_sub  : BitPat = BitPat("b100 0 11??? 00??? 01")
  def c_subw : BitPat = BitPat("b100 1 11??? 00??? 01")
  def c_xor  : BitPat = BitPat("b100 0 11??? 01??? 01")
  def c_or   : BitPat = BitPat("b100 0 11??? 10??? 01")
  def c_and  : BitPat = BitPat("b100 0 11??? 11??? 01")
  def c_j    : BitPat = BitPat("b101 ? ????? ????? 01")
  def c_beqz : BitPat = BitPat("b110 ? ????? ????? 01")
  def c_bnez : BitPat = BitPat("b111 ? ????? ????? 01")
  def c_addi16sp : BitPat = BitPat("b011 ? 00010 ????? 01")

  // bit[1:0] == 2'b00
  def c_ilg  : BitPat = BitPat("b000 000 000 00 000 00")     // illegal instruction
  def c_lw   : BitPat = BitPat("b010 ??? ??? ?? ??? 00")
  def c_ld   : BitPat = BitPat("b011 ??? ??? ?? ??? 00")
  def c_sw   : BitPat = BitPat("b110 ??? ??? ?? ??? 00")
  def c_sd   : BitPat = BitPat("b111 ??? ??? ?? ??? 00")
  def c_addi4spn :BitPat = BitPat("b000 ?? ???? ? ? ??? 00")

  // bit[1:0] == 2'b10
  def c_slli : BitPat = BitPat("b000 ? ????? ????? 10")
  def c_slli64:BitPat = BitPat("b000 0 ????? 00000 10")
  def c_lwsp : BitPat = BitPat("b010 ? ????? ????? 10")
  def c_ldsp : BitPat = BitPat("b011 ? ????? ????? 10")
  def c_sdsp : BitPat = BitPat("b111 ? ????? ????? 10")
  def c_jr   : BitPat = BitPat("b100 0 ????? 00000 10")
  def c_mv   : BitPat = BitPat("b100 0 ????? ????? 10")
  def c_ebreak:BitPat = BitPat("b100 1 00000 00000 10")
  def c_jalr : BitPat = BitPat("b100 1 ????? 00000 10")
  def c_add  : BitPat = BitPat("b100 1 ????? ????? 10")
  def c_swsp : BitPat = BitPat("b110 ? ????? ????? 10")
}
